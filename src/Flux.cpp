//
// Title: Decentralized electrity market on Awaji Island
//
// Credits: Arkadiusz P. Wojcik
//
// Based on: http://holbert.faculty.asu.edu/eee463/SolarCalcs.pdf
//
// Mail: arek@wojcik.it
//
// Date: 2013/01/31
//

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

#define RAD_CONV 0.017453293
#define DAYS_PER_YEAR 365
#define ZERO 0
#define DEGREES_PER_REV 360.0

#define dcos( x ) cos( (x) * RAD_CONV )
#define dsin( x ) sin( (x) * RAD_CONV )
#define dtan( x ) tan( (x) * RAD_CONV )
#define dasin( x ) asin( x ) / RAD_CONV
#define dacos( x ) acos( x ) / RAD_CONV
#define datan( x ) atan( x ) / RAD_CONV

inline double min( const double x, const double y )
{
	return ( ( x > y ) ? y : x );
}

double AEC[] = { 0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142064516129032,0.142129032258065,0.142193548387097,0.142258064516129,0.142322580645161,0.142387096774194,0.142451612903226,0.142516129032258,0.14258064516129,0.142645161290323,0.142709677419355,0.142774193548387,0.142838709677419,0.142903225806452,0.142967741935484,0.143032258064516,0.143096774193548,0.143161290322581,0.143225806451613,0.143290322580645,0.143354838709677,0.14341935483871,0.143483870967742,0.143548387096774,0.143612903225806,0.143677419354839,0.143741935483871,0.143806451612903,0.143870967741935,0.143935483870968,0.144,0.144428571428571,0.144857142857143,0.145285714285714,0.145714285714286,0.146142857142857,0.146571428571429,0.147,0.147428571428571,0.147857142857143,0.148285714285714,0.148714285714286,0.149142857142857,0.149571428571429,0.15,0.150428571428571,0.150857142857143,0.151285714285714,0.151714285714286,0.152142857142857,0.152571428571429,0.153,0.153428571428571,0.153857142857143,0.154285714285714,0.154714285714286,0.155142857142857,0.155571428571429,0.156,0.156774193548387,0.157548387096774,0.158322580645161,0.159096774193548,0.159870967741935,0.160645161290323,0.16141935483871,0.162193548387097,0.162967741935484,0.163741935483871,0.164516129032258,0.165290322580645,0.166064516129032,0.166838709677419,0.167612903225806,0.168387096774194,0.169161290322581,0.169935483870968,0.170709677419355,0.171483870967742,0.172258064516129,0.173032258064516,0.173806451612903,0.17458064516129,0.175354838709677,0.176129032258064,0.176903225806452,0.177677419354839,0.178451612903226,0.179225806451613,0.18,0.180533333333333,0.181066666666667,0.1816,0.182133333333333,0.182666666666667,0.1832,0.183733333333333,0.184266666666667,0.1848,0.185333333333333,0.185866666666667,0.1864,0.186933333333333,0.187466666666667,0.188,0.188533333333333,0.189066666666667,0.1896,0.190133333333333,0.190666666666667,0.1912,0.191733333333333,0.192266666666667,0.1928,0.193333333333333,0.193866666666667,0.1944,0.194933333333333,0.195466666666667,0.196,0.196290322580645,0.19658064516129,0.196870967741936,0.197161290322581,0.197451612903226,0.197741935483871,0.198032258064516,0.198322580645161,0.198612903225806,0.198903225806452,0.199193548387097,0.199483870967742,0.199774193548387,0.200064516129032,0.200354838709677,0.200645161290323,0.200935483870968,0.201225806451613,0.201516129032258,0.201806451612903,0.202096774193548,0.202387096774194,0.202677419354839,0.202967741935484,0.203258064516129,0.203548387096774,0.203838709677419,0.204129032258065,0.20441935483871,0.204709677419355,0.205,0.205066666666667,0.205133333333333,0.2052,0.205266666666667,0.205333333333333,0.2054,0.205466666666667,0.205533333333333,0.2056,0.205666666666667,0.205733333333333,0.2058,0.205866666666667,0.205933333333333,0.206,0.206066666666667,0.206133333333333,0.2062,0.206266666666667,0.206333333333333,0.2064,0.206466666666667,0.206533333333333,0.2066,0.206666666666667,0.206733333333333,0.2068,0.206866666666667,0.206933333333333,0.207,0.206806451612903,0.206612903225806,0.20641935483871,0.206225806451613,0.206032258064516,0.205838709677419,0.205645161290323,0.205451612903226,0.205258064516129,0.205064516129032,0.204870967741935,0.204677419354839,0.204483870967742,0.204290322580645,0.204096774193548,0.203903225806452,0.203709677419355,0.203516129032258,0.203322580645161,0.203129032258065,0.202935483870968,0.202741935483871,0.202548387096774,0.202354838709677,0.202161290322581,0.201967741935484,0.201774193548387,0.20158064516129,0.201387096774194,0.201193548387097,0.201,0.200225806451613,0.199451612903226,0.198677419354839,0.197903225806452,0.197129032258065,0.196354838709677,0.19558064516129,0.194806451612903,0.194032258064516,0.193258064516129,0.192483870967742,0.191709677419355,0.190935483870968,0.190161290322581,0.189387096774194,0.188612903225806,0.187838709677419,0.187064516129032,0.186290322580645,0.185516129032258,0.184741935483871,0.183967741935484,0.183193548387097,0.18241935483871,0.181645161290323,0.180870967741935,0.180096774193548,0.179322580645161,0.178548387096774,0.177774193548387,0.177,0.176433333333333,0.175866666666667,0.1753,0.174733333333333,0.174166666666667,0.1736,0.173033333333333,0.172466666666667,0.1719,0.171333333333333,0.170766666666667,0.1702,0.169633333333333,0.169066666666667,0.1685,0.167933333333333,0.167366666666667,0.1668,0.166233333333333,0.165666666666667,0.1651,0.164533333333333,0.163966666666667,0.1634,0.162833333333333,0.162266666666667,0.1617,0.161133333333333,0.160566666666667,0.16,0.159645161290323,0.159290322580645,0.158935483870968,0.15858064516129,0.158225806451613,0.157870967741935,0.157516129032258,0.157161290322581,0.156806451612903,0.156451612903226,0.156096774193548,0.155741935483871,0.155387096774194,0.155032258064516,0.154677419354839,0.154322580645161,0.153967741935484,0.153612903225806,0.153258064516129,0.152903225806452,0.152548387096774,0.152193548387097,0.151838709677419,0.151483870967742,0.151129032258065,0.150774193548387,0.15041935483871,0.150064516129032,0.149709677419355,0.149354838709677,0.149,0.148766666666667,0.148533333333333,0.1483,0.148066666666667,0.147833333333333,0.1476,0.147366666666667,0.147133333333333,0.1469,0.146666666666667,0.146433333333333,0.1462,0.145966666666667,0.145733333333333,0.1455,0.145266666666667,0.145033333333333,0.1448,0.144566666666667,0.144333333333333,0.1441,0.143866666666667,0.143633333333333,0.1434,0.143166666666667,0.142933333333333,0.1427,0.142466666666667,0.142233333333333,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142,0.142
  };
double RDR[] = { 0.0575,0.057525,0.057575,0.05765,0.05775,0.057875,0.058025,0.0582,0.0584,0.058625,0.058875,0.05915,0.05945,0.059775,0.060125,0.0605,0.0609,0.061325,0.061775,0.06225,0.058,0.0580645161290323,0.0581290322580645,0.0581935483870968,0.058258064516129,0.0583225806451613,0.0583870967741936,0.0584516129032258,0.0585161290322581,0.0585806451612903,0.0586451612903226,0.0587096774193548,0.0587741935483871,0.0588387096774194,0.0589032258064516,0.0589677419354839,0.0590322580645161,0.0590967741935484,0.0591612903225806,0.0592258064516129,0.0592903225806452,0.0593548387096774,0.0594193548387097,0.0594838709677419,0.0595483870967742,0.0596129032258065,0.0596774193548387,0.059741935483871,0.0598064516129032,0.0598709677419355,0.0599354838709677,0.06,0.0603928571428571,0.0607857142857143,0.0611785714285714,0.0615714285714286,0.0619642857142857,0.0623571428571429,0.06275,0.0631428571428571,0.0635357142857143,0.0639285714285714,0.0643214285714286,0.0647142857142857,0.0651071428571429,0.0655,0.0658928571428571,0.0662857142857143,0.0666785714285714,0.0670714285714286,0.0674642857142857,0.0678571428571429,0.06825,0.0686428571428571,0.0690357142857143,0.0694285714285714,0.0698214285714286,0.0702142857142857,0.0706071428571429,0.071,0.0718387096774194,0.0726774193548387,0.0735161290322581,0.0743548387096774,0.0751935483870968,0.0760322580645161,0.0768709677419355,0.0777096774193548,0.0785483870967742,0.0793870967741936,0.0802258064516129,0.0810645161290323,0.0819032258064516,0.082741935483871,0.0835806451612903,0.0844193548387097,0.085258064516129,0.0860967741935484,0.0869354838709677,0.0877741935483871,0.0886129032258065,0.0894516129032258,0.0902903225806452,0.0911290322580645,0.0919677419354839,0.0928064516129032,0.0936451612903226,0.0944838709677419,0.0953225806451613,0.0961612903225806,0.097,0.0978,0.0986,0.0994,0.1002,0.101,0.1018,0.1026,0.1034,0.1042,0.105,0.1058,0.1066,0.1074,0.1082,0.109,0.1098,0.1106,0.1114,0.1122,0.113,0.1138,0.1146,0.1154,0.1162,0.117,0.1178,0.1186,0.1194,0.1202,0.121,0.12141935483871,0.121838709677419,0.122258064516129,0.122677419354839,0.123096774193548,0.123516129032258,0.123935483870968,0.124354838709677,0.124774193548387,0.125193548387097,0.125612903225806,0.126032258064516,0.126451612903226,0.126870967741935,0.127290322580645,0.127709677419355,0.128129032258065,0.128548387096774,0.128967741935484,0.129387096774194,0.129806451612903,0.130225806451613,0.130645161290323,0.131064516129032,0.131483870967742,0.131903225806452,0.132322580645161,0.132741935483871,0.133161290322581,0.13358064516129,0.134,0.134066666666667,0.134133333333333,0.1342,0.134266666666667,0.134333333333333,0.1344,0.134466666666667,0.134533333333333,0.1346,0.134666666666667,0.134733333333333,0.1348,0.134866666666667,0.134933333333333,0.135,0.135066666666667,0.135133333333333,0.1352,0.135266666666667,0.135333333333333,0.1354,0.135466666666667,0.135533333333333,0.1356,0.135666666666667,0.135733333333333,0.1358,0.135866666666667,0.135933333333333,0.136,0.135548387096774,0.135096774193548,0.134645161290323,0.134193548387097,0.133741935483871,0.133290322580645,0.132838709677419,0.132387096774194,0.131935483870968,0.131483870967742,0.131032258064516,0.13058064516129,0.130129032258065,0.129677419354839,0.129225806451613,0.128774193548387,0.128322580645161,0.127870967741935,0.12741935483871,0.126967741935484,0.126516129032258,0.126064516129032,0.125612903225806,0.125161290322581,0.124709677419355,0.124258064516129,0.123806451612903,0.123354838709677,0.122903225806452,0.122451612903226,0.122,0.121032258064516,0.120064516129032,0.119096774193548,0.118129032258065,0.117161290322581,0.116193548387097,0.115225806451613,0.114258064516129,0.113290322580645,0.112322580645161,0.111354838709677,0.110387096774194,0.10941935483871,0.108451612903226,0.107483870967742,0.106516129032258,0.105548387096774,0.10458064516129,0.103612903225806,0.102645161290323,0.101677419354839,0.100709677419355,0.099741935483871,0.0987741935483871,0.0978064516129032,0.0968387096774194,0.0958709677419355,0.0949032258064516,0.0939354838709677,0.0929677419354839,0.092,0.0913666666666667,0.0907333333333333,0.0901,0.0894666666666667,0.0888333333333333,0.0882,0.0875666666666667,0.0869333333333333,0.0863,0.0856666666666667,0.0850333333333333,0.0844,0.0837666666666667,0.0831333333333333,0.0825,0.0818666666666667,0.0812333333333333,0.0806,0.0799666666666667,0.0793333333333333,0.0787,0.0780666666666667,0.0774333333333333,0.0768,0.0761666666666667,0.0755333333333333,0.0749,0.0742666666666667,0.0736333333333333,0.073,0.0726774193548387,0.0723548387096774,0.0720322580645161,0.0717096774193548,0.0713870967741935,0.0710645161290323,0.070741935483871,0.0704193548387097,0.0700967741935484,0.0697741935483871,0.0694516129032258,0.0691290322580645,0.0688064516129032,0.0684838709677419,0.0681612903225806,0.0678387096774194,0.0675161290322581,0.0671935483870968,0.0668709677419355,0.0665483870967742,0.0662258064516129,0.0659032258064516,0.0655806451612903,0.065258064516129,0.0649354838709678,0.0646129032258065,0.0642903225806452,0.0639677419354839,0.0636451612903226,0.0633225806451613,0.063,0.0628,0.0626,0.0624,0.0622,0.062,0.0618,0.0616,0.0614,0.0612,0.061,0.0608,0.0606,0.0604,0.0602,0.06,0.0598,0.0596,0.0594,0.0592,0.059,0.0588,0.0586,0.0584,0.0582,0.058,0.0578,0.0576,0.0574,0.0572,0.057,0.057,0.057,0.057,0.057,0.057,0.057,0.057,0.057,0.057,0.057
  };

//日射量
double ** CalculateFluxOfSolarRadiation()
{
	double ** Flux = (double **) calloc(366, sizeof(double *));
	for(unsigned int i = 0; i < 366; i++)
	{
		Flux[i] = (double *) calloc(25, sizeof(double)); //24 hours per day +1 (counting from zero)
	}
	const double L = 34.338749; //Latitude for Sumoto city
	const double Long = 134.898033; //Longitude
	double beta2 = 30.0; //slope of panel, if is suntracking system - then 90
	double alpha2 = 00.0; //Azimuth
	const double z = 330; //Altitude
	const double rho = 0.2;//Foreground Refractivity
	int N;
	double DayTotal;
	double Hs = ZERO;


	for ( N = 1; N <= DAYS_PER_YEAR; N++ )
	{
		const double I0 = 429.5 * ( 1 + ( 0.033 * dcos( N * DEGREES_PER_REV / DAYS_PER_YEAR ) ) ); 
		const double delta = 23.45 * dsin( ( N + 284.0 ) / DAYS_PER_YEAR * DEGREES_PER_REV ); 
		const double B = DEGREES_PER_REV * ( N - 81.0 )/ DAYS_PER_YEAR;
		const double LSTM = 15.0 * int( Long / 15.0 ); // (4)
		const double ET = 9.87 * dsin( 2.0 * B ) - 7.53 * dcos( B ) - 1.5 * dsin( B );
	
		const double a = dcos( L ) / ( dsin( alpha2 ) * dtan( beta2 ) ) + dsin( L ) / dtan( alpha2 );
		const double b = dtan( delta ) * ( dcos( L ) / dtan( alpha2 ) - dsin( L ) / ( dsin( alpha2 ) * dtan( beta2 ) ) );
		const double tHss1 = dacos( ( a * b + sqrt( a * a - b * b + 1 ) ) / ( a * a + 1 ) ); 
		const double tHss2 = dacos( ( a * b - sqrt( a * a - b * b + 1 ) ) / ( a * a + 1 ) ); 
	
		const double cosHs = -dtan( L ) * dtan( delta );
		if ( fabs( cosHs ) <= 1 )
			Hs = -dacos( cosHs );
		double Hsrs = min( Hs, min( tHss2, tHss1 ) );
		int LST = 0;
		DayTotal = ZERO;
		int INTERVAL = 60;
		int hour=0;
		for ( 0; LST < 4*(180-(int)Hsrs); LST += INTERVAL )
		{	
			const double AST = LST + 4.0 * ( LSTM - Long ) + ET; 
			const double H = ( AST - 720.0 ) / 4.0;
			const double beta1 = dasin( dcos( L ) * dcos( delta ) * dcos( H ) + dsin( L ) * dsin( delta ) ); 
			const double alpha1c = dasin( dcos( delta ) * dsin( H ) / dcos( beta1 ) ); 
			const double tE = 4.0 * ( 180.0 - dacos( dtan( delta ) / dtan( L ) ) ); 
			const double tW = 4.0 * ( 180.0 + dacos( dtan( delta ) / dtan( L ) ) ); 
			double alpha1 = alpha1c;
			if ( AST < tE || AST > tW )
			{
				if ( alpha1c < ZERO )
				{
					alpha1 = 180.0 + alpha1c;
					alpha1 = -alpha1;
				}
				else
				{
					alpha1 = 180.0 - alpha1c;
					if ( alpha1 < 0 ) alpha1 = -alpha1;
				}
			}

			double theta = dacos( dsin( beta1 ) * dcos( beta2 ) + dcos( beta1 ) * dsin( beta2 ) * dcos( alpha1 - alpha2 ) ); 
			
			if ( theta <= 90.0 && beta1 > 0.5 )
			{	
				const double pp0 = exp( -0.0000361 * z );
				const double Idn = I0 * exp( -pp0 * AEC[N-1] / dsin( beta1 ) );
				const double Id = Idn * dcos( theta );
				const double Ids = RDR[N-1] * Idn * ( 1 + dcos( beta1 ) ) / 2;
				const double Idr = Idn * rho * ( RDR[N-1] + dsin( beta1 ) ) * ( ( 1 - dcos( beta2 ) ) / 2 );
				Flux[N][hour++] = (Id + Ids + Idr) * INTERVAL  / (60.0*317.2); //conversion from Btu/ft2 into kWh/m2
				DayTotal += (Id + Ids + Idr) * INTERVAL  / 60.0;
			}
			else 
			{
				Flux[N][hour++] =0;
			}
		}
		while(hour<24)
		{
			Flux[N][hour++] =0;
		}

	}
	return Flux;
}

